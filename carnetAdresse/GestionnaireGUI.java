/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carnetAdresse;

import static com.carnetAdresse.BddCarnet.result;
import static com.carnetAdresse.BddCarnet.resultMeta;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import static com.carnetAdresse.BddCarnet.state;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author cda611
 */
public class GestionnaireGUI extends javax.swing.JFrame {

   String connectionUrl = "jdbc:sqlserver://localhost:1433;"
                + "databaseName=Carnet_Adresse;user=sa;password=sa";
     
    public GestionnaireGUI() {
      
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
 
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        creer = new javax.swing.JButton();
        modifB = new javax.swing.JButton();
        saveB = new javax.swing.JButton();
        deleteB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("Suivant");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel5.setText("Gestionnaire de carnets");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(20, 20, 20))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(401, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane1.addTab("tab1", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Votre carnet d'addresse");

        jLabel2.setText("Carnet sélectionné :");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Le carnet actif est : ");

        creer.setBackground(new java.awt.Color(0, 204, 255));
        creer.setForeground(new java.awt.Color(0, 0, 0));
        creer.setText("Créer");
        creer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creerActionPerformed(evt);
            }
        });

        modifB.setForeground(new java.awt.Color(0, 0, 0));
        modifB.setLabel("Modifier");
        modifB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifBActionPerformed(evt);
            }
        });

        saveB.setForeground(new java.awt.Color(0, 0, 0));
        saveB.setText("Sauvegarder");
        saveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBActionPerformed(evt);
            }
        });

        deleteB.setBackground(new java.awt.Color(255, 0, 51));
        deleteB.setForeground(new java.awt.Color(0, 0, 0));
        deleteB.setText("Supprimer");
        deleteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBActionPerformed(evt);
            }
        });

        jTable1.setModel(initTable());
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(175, 175, 175)))
                .addContainerGap(366, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(creer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(modifB))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteB)
                        .addGap(53, 53, 53))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 873, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(creer)
                    .addComponent(modifB)
                    .addComponent(saveB)
                    .addComponent(deleteB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(34, 34, 34))
        );

        jComboBox1.setModel(initCarnetModel());

        jTabbedPane1.addTab("tab2", jPanel2);

        jTree1.setModel(initCDModel());
        jScrollPane2.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 812, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("tab3", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void creerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creerActionPerformed
     
           ca.creer();//devra être géré par le gestionnaire de carnets 
       
    }//GEN-LAST:event_creerActionPerformed

    private void modifBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_modifBActionPerformed

    private void saveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveBActionPerformed

    private void deleteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteBActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
        jLabel3.setText("Le carnet actif est : "  + jComboBox1.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.setSelectedIndex(1);
        
    }//GEN-LAST:event_jButton1ActionPerformed
 private DefaultComboBoxModel initCarnetModel() {
        return new DefaultComboBoxModel( initCBcarnet());
    }
  
    
        
    private Vector  initCBcarnet(){
        
          Vector v = new Vector();

         try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                
            } catch (Exception e) {
                System.out.println("échec driver");
                return v;
            }
          Connection connect = null;

        try {
           
            connect = DriverManager.getConnection(connectionUrl);
          
        } 
        catch (SQLException e) {
            e.printStackTrace();
            return v;
        }    
        
         String query = "SELECT * FROM dbo.Carnet_Adresse;";
        try{
         state = connect.createStatement();
         ResultSet rs = state.executeQuery(query);
          while (rs.next()) {
                 v.add(rs.getString("NOM_PROPRIETAIRE"));
               
            }
            rs.close();
            state.close();
         }catch (SQLException e){
        System.out.println(e.getMessage());
           return v; }
         return v;
    }
    
//    private Vector initTitre() throws ClassNotFoundException, SQLException{
//     prepTitre = new Vector();
//     
//       Connection connect = null;
//
//      
//
//        try {
//            try {
//                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
//                
//            } catch (Exception e) {
//                System.out.println("échec driver");
//            }
//            connect = DriverManager.getConnection(connectionUrl);
//           
//        } // Handle any errors that may have occurred.
//        catch (SQLException e) {
//            e.printStackTrace();
//            System.out.println("Echec");
//        }      
//        try{
//         state = connect.createStatement();
//         }catch (SQLException e){
//        System.out.println(e.getMessage());}
//        
//        
//        //requête SQL 
//        
//                 result = state.executeQuery("SELECT * FROM Personne");
//   
//                 resultMeta = result.getMetaData();
//                 
//                 
//        for(int i = 1; i <= resultMeta.getColumnCount(); i++)
//          prepTitre.add(resultMeta.getColumnName(i));
//                
//     
//       return prepTitre;
//  
//}
//  
// private Vector initData() throws ClassNotFoundException, SQLException{
//     prepData = new Vector();
//     
//       Connection connect = null;
//
//        
//
//        try {
//            try {
//                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
//                
//            } catch (Exception e) {
//                System.out.println("échec driver");
//            }
//            connect = DriverManager.getConnection(connectionUrl);
//           
//        } // Handle any errors that may have occurred.
//        catch (SQLException e) {
//            e.printStackTrace();
//            System.out.println("Echec");
//        }      
//        try{
//         state = connect.createStatement();
//         }catch (SQLException e){
//        System.out.println(e.getMessage());}
//        
//        
//        //requête SQL 
//        
//                 result = state.executeQuery("SELECT * FROM Personne WHERE DATE_NAISSANCE IS NOT NULL ");
//   
//                 resultMeta = result.getMetaData();
//                 
//         for(int i = 1; i <= resultMeta.getColumnCount(); i++)
//                 
//      while(result.next()){
//                    
//                     for(int j = 1; j <= resultMeta.getColumnCount()  ; j++)
//                      prepData.add(result.getObject(j));
//                
//     
//   
//}      return prepData;
//}
 
 private DefaultTableModel initTable() {
       ArrayList columnNames = new ArrayList();
        ArrayList data = new ArrayList();

        
        String url = "jdbc:sqlserver://localhost:1433;databaseName=Carnet_Adresse;";
        String userid = "sa";
        String password = "sa";
        String sql = "SELECT * FROM personne WHERE DATE_NAISSANCE IS NOT NULL ";

        
        try (Connection connection = DriverManager.getConnection( url, userid, password );
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery( sql ))
        {
            ResultSetMetaData md = rs.getMetaData();
            int columns = md.getColumnCount();

           
            for (int i = 1; i <= columns; i++)
            {
                columnNames.add( md.getColumnName(i) );
            }
String choice = jComboBox1.getSelectedItem().toString();
           
            while (rs.next())
            {
                ArrayList row = new ArrayList<Personne>(columns);

                for (int i = 1; i <= columns; i++)
                {
                    row.add( rs.getObject(i));
                }

                data.add( row );
            }
        }
        catch (SQLException e)
        {
            System.out.println( e.getMessage() );
        }

       
        Vector columnNamesVector = new Vector();
        Vector dataVector = new Vector();

        for (int i = 0; i < data.size(); i++)
        {
            ArrayList subArray = (ArrayList)data.get(i);
            Vector subVector = new Vector();
            for (int j = 0; j < subArray.size(); j++)
            {
                subVector.add(subArray.get(j));
            }
            dataVector.add(subVector);
        }

        for (int i = 0; i < columnNames.size(); i++ )
            columnNamesVector.add(columnNames.get(i));
       return new DefaultTableModel(dataVector, columnNamesVector);
}
  
private DefaultTreeModel initCDModel() {
        return new DefaultTreeModel(initCDNode());
    }

    private DefaultMutableTreeNode initCDNode() {
       
       
              
              DefaultMutableTreeNode root = new DefaultMutableTreeNode("Gestionnaire de carnets");
              
              try {
                  String connectionUrl = "jdbc:sqlserver://localhost:1433;"
                          + "databaseName=Carnet_Adresse;user=sa;password=sa";
                  Connection connect = null;
                  
                  System.out.println("Lancement ");
                    
                  Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");  
                  
                  connect = DriverManager.getConnection(connectionUrl);
                  
                  
                  try{
                      state = connect.createStatement();
                  }catch (SQLException e){
                      System.out.println(e.getMessage());}
                  
                  result = state.executeQuery("SELECT * FROM Personne WHERE DATE_NAISSANCE IS NOT NULL ");
                  
                  resultMeta = result.getMetaData();
                  
                  
                  // Handle any errors that may have occurred.
              } catch ( SQLException ex) {
                  Logger.getLogger(GestionnaireGUI.class.getName()).log(Level.SEVERE, null, ex);
              }
              catch ( ClassNotFoundException ex) {
                  Logger.getLogger(GestionnaireGUI.class.getName()).log(Level.SEVERE, null, ex);
              }
              
              String nomProp = null; 
              
              DefaultMutableTreeNode carnetNd = null;
              DefaultMutableTreeNode typeNd = null;
              DefaultMutableTreeNode contactNd = null;
              
            
              try {
                  while (result.next()) {
                
                    if(nomProp == null){
                    root.add(carnetNd = new DefaultMutableTreeNode(result.getString("Nom_Proprietaire")));
                    nomProp = result.getString("Nom_Proprietaire");
                    }
                      if(!nomProp.equalsIgnoreCase(result.getString("Nom_Proprietaire"))){
                             nomProp = result.getString("Nom_Proprietaire");
                      root.add(carnetNd = new DefaultMutableTreeNode(nomProp));
                      }
                      
                      carnetNd.add(typeNd = new DefaultMutableTreeNode());
                      typeNd.add(contactNd = new DefaultMutableTreeNode());
                      
                  }
              } catch (SQLException ex) {
                  Logger.getLogger(GestionnaireGUI.class.getName()).log(Level.SEVERE, null, ex);
             
        } return root; 
          }
    
   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionnaireGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionnaireGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionnaireGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionnaireGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionnaireGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton creer;
    private javax.swing.JButton deleteB;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton modifB;
    private javax.swing.JButton saveB;
    // End of variables declaration//GEN-END:variables
    private String []title; 
    private Object [][]data; 
    private Vector<String> prepTitre;
    private Vector<Object> prepData;
     Statement state;
   ResultSet result;
   ResultSetMetaData resultMeta;
   Connection connect;
    int columns = 0;
    GestionnaireCarnetAdresse ge; 
    CarnetAdresse ca = new CarnetAdresse();

}
